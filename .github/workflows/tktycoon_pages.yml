name: TK Tycoon Freight ‚Äî Deluxe PWA (Zero Commit / Zero Token)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate deluxe PWA game
        shell: bash
        run: |
          python - <<'PY'
          # -*- coding: utf-8 -*-
          import json, base64, io, pathlib, textwrap, math, random
          site = pathlib.Path("_site"); site.mkdir(parents=True, exist_ok=True)

          # --- simple generated icon (no external assets) ---
          try:
            from PIL import Image, ImageDraw
            def icon(sz):
              im = Image.new("RGBA",(sz,sz),(15,17,21,255))
              d=ImageDraw.Draw(im)
              d.rounded_rectangle((24,24,sz-24,sz-24),20,outline=(117,196,107,255),width=10)
              d.rectangle((int(sz*0.22),int(sz*0.56),int(sz*0.78),int(sz*0.72)), fill=(117,196,107,255))
              d.rectangle((int(sz*0.28),int(sz*0.44),int(sz*0.72),int(sz*0.60)), fill=(41,58,85,255))
              b=io.BytesIO(); im.save(b, format="PNG"); return "data:image/png;base64,"+base64.b64encode(b.getvalue()).decode()
            icons=[{"src":icon(s),"sizes":f"{s}x{s}","type":"image/png"} for s in (192,512)]
          except Exception:
            icons=[]

          # --- manifest & service worker ---
          (site/"manifest.webmanifest").write_text(json.dumps({
            "name":"TK Tycoon Freight Deluxe",
            "short_name":"TK Tycoon",
            "start_url":"./",
            "display":"standalone",
            "background_color":"#0f1115",
            "theme_color":"#0f1115",
            "icons": icons
          }, indent=2), encoding="utf-8")

          (site/"sw.js").write_text(textwrap.dedent("""
            const CACHE='tktycoon-deluxe-v1';
            const ASSETS=['./','./index.html','./style.css','./app.js','./manifest.webmanifest'];
            self.addEventListener('install',e=>{e.waitUntil(caches.open(CACHE).then(c=>c.addAll(ASSETS)))});
            self.addEventListener('activate',e=>{e.waitUntil(self.clients.claim())});
            self.addEventListener('fetch',e=>{
              e.respondWith(caches.match(e.request).then(r=>r||fetch(e.request).then(res=>{
                const cp=res.clone(); caches.open(CACHE).then(c=>c.put(e.request,cp)); return res;
              })));
            });
          """).strip(), encoding="utf-8")

          # --- index.html (UI avec onglets, mini-map, PWA) ---
          (site/"index.html").write_text(textwrap.dedent("""
            <!doctype html>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1,viewport-fit=cover">
            <title>TK Tycoon Freight Deluxe</title>
            <link rel="manifest" href="./manifest.webmanifest">
            <link rel="stylesheet" href="./style.css">
            <div class="topbar">
              <div class="brand">üöö TK Tycoon Freight Deluxe</div>
              <div class="stats">
                ‚è± <span id="day">Day 1</span>
                ‚Ä¢ üí∞ <span id="money">0</span>
                ‚Ä¢ ‚õΩ <span id="fuel">0</span>
                ‚Ä¢ üõ£ <span id="maint">0</span>
              </div>
            </div>

            <div class="wrap">
              <div class="left">
                <div class="tabs">
                  <button data-tab="build" class="active">Construire</button>
                  <button data-tab="fleet">Flotte</button>
                  <button data-tab="contracts">Contrats</button>
                  <button data-tab="economy">√âconomie</button>
                </div>

                <div class="tab" id="tab-build">
                  <h3>R√©seau routier</h3>
                  <div class="row"><label>Ville A</label><select id="cityA"></select></div>
                  <div class="row"><label>Ville B</label><select id="cityB"></select></div>
                  <div class="row"><label>Niveau route</label>
                    <select id="roadLvl">
                      <option value="1">Niv.1 ‚Äî 1 000$ (lent)</option>
                      <option value="2">Niv.2 ‚Äî 2 500$ (moyen)</option>
                      <option value="3">Niv.3 ‚Äî 6 000$ (rapide)</option>
                    </select>
                  </div>
                  <button id="buildRoad">Construire / Am√©liorer</button>
                  <p class="hint">Astuce : am√©liore un axe principal, la vitesse impacte les revenus.</p>
                </div>

                <div class="tab hidden" id="tab-fleet">
                  <h3>Nouvel achat</h3>
                  <div class="row"><label>Type</label>
                    <select id="truckType">
                      <option value="van">Fourgon ‚Äî 6u ‚Äî 60km/h ‚Äî 2L/100</option>
                      <option value="rigid">Porteur ‚Äî 16u ‚Äî 75km/h ‚Äî 6L/100</option>
                      <option value="semi">Semi ‚Äî 32u ‚Äî 85km/h ‚Äî 12L/100</option>
                      <option value="tanker">Citerne ‚Äî 28u ‚Äî 80km/h ‚Äî 10L/100</option>
                    </select>
                  </div>
                  <div class="row"><label>Origine</label><select id="from"></select></div>
                  <div class="row"><label>Destination</label><select id="to"></select></div>
                  <div class="row"><label>Cargo</label>
                    <select id="cargoType">
                      <option value="wood">bois</option>
                      <option value="grain">grain</option>
                      <option value="steel">acier</option>
                      <option value="goods">biens</option>
                      <option value="fuel">carburant</option>
                    </select>
                  </div>
                  <button id="buyTruck">Acheter & assigner</button>
                  <div id="fleetList" class="list"></div>
                </div>

                <div class="tab hidden" id="tab-contracts">
                  <h3>Contrats de fret</h3>
                  <div id="contracts" class="list"></div>
                </div>

                <div class="tab hidden" id="tab-economy">
                  <h3>√âconomie</h3>
                  <div id="eco" class="list"></div>
                  <p class="hint">Les prix varient selon la journ√©e. Les co√ªts d‚Äôentretien et de carburant sont d√©duits automatiquement.</p>
                </div>
              </div>

              <div class="right">
                <canvas id="view" width="1300" height="740" aria-label="map"></canvas>
                <canvas id="mini" width="220" height="140" class="mini"></canvas>
              </div>
            </div>

            <script src="./app.js"></script>
            <script> if('serviceWorker' in navigator){ navigator.serviceWorker.register('./sw.js'); } </script>
          """).strip(), encoding="utf-8")

          # --- style.css (th√®me sombre moderne + badges) ---
          (site/"style.css").write_text(textwrap.dedent("""
            :root{--bg:#0f1115;--panel:#141820;--line:#2a2f3a;--txt:#e6e6e6;--acc:#75c46b;--warn:#ffb454;--bad:#ef5350}
            *{box-sizing:border-box}html,body{height:100%}body{margin:0;background:var(--bg);color:var(--txt);font:14px/1.4 system-ui,Segoe UI,Roboto}
            .topbar{display:flex;justify-content:space-between;align-items:center;padding:10px 14px;border-bottom:1px solid var(--line);background:#0b0e13;position:sticky;top:0;z-index:10}
            .brand{font-weight:800;letter-spacing:.2px}
            .stats{opacity:.95;display:flex;gap:10px;align-items:center}
            .wrap{max-width:1500px;margin:12px auto;display:grid;grid-template-columns:360px 1fr;gap:12px;padding:0 12px}
            .left{display:flex;flex-direction:column;gap:12px}
            .tabs{display:grid;grid-template-columns:repeat(4,1fr);gap:6px}
            .tabs button{padding:.6rem;border-radius:10px;border:1px solid var(--line);background:#10151f;color:var(--txt);cursor:pointer;font-weight:600}
            .tabs button.active{background:var(--panel);outline:2px solid var(--acc);border-color:transparent}
            .tab{background:var(--panel);border:1px solid var(--line);border-radius:12px;padding:12px}
            .hidden{display:none}
            .row{display:grid;grid-template-columns:1fr;gap:6px;margin:.35rem 0}
            select,button{padding:.55rem;border-radius:10px;border:1px solid var(--line);background:#10151f;color:var(--txt)}
            button{cursor:pointer;font-weight:700}
            .hint{opacity:.8;margin-top:6px}
            .list .item{border:1px solid var(--line);border-radius:10px;padding:8px;margin:6px 0}
            .badge{display:inline-block;padding:2px 6px;border-radius:999px;background:#1f2835;border:1px solid var(--line);font-size:12px;margin-left:6px}
            .badge.warn{background:#3a2b14;border-color:#5e4420;color:#ffd38f}
            .badge.ok{background:#1d2d22;border-color:#2c4f37;color:#b3e3b5}
            #view{width:100%;border:1px solid var(--line);border-radius:12px;background:#0b0f16}
            .mini{position:absolute;right:18px;bottom:18px;border:1px solid var(--line);border-radius:8px;background:#0b0f16;opacity:.9}
            @media (max-width:1024px){.wrap{grid-template-columns:1fr}.right{order:-1}}
          """).strip(), encoding="utf-8")

          # --- app.js : gameplay avanc√© + visuel ---
          (site/"app.js").write_text(textwrap.dedent(r"""
            // ======== Donn√©es de base ========
            const RNG = mulberry32(hashCode(location.pathname));
            const CITIES = [
              {id:'A', name:'Port-Est',    x:120,  y:520, pop:42},
              {id:'B', name:'Valbois',     x:360,  y:220, pop:28},
              {id:'C', name:'Fer-sur-Lac', x:760,  y:180, pop:33},
              {id:'D', name:'Grainville',  x:1040, y:520, pop:36},
              {id:'E', name:'Cap-Sud',     x:560,  y:560, pop:30},
              {id:'F', name:'Nordacier',   x:1020, y:120, pop:26},
            ];
            const CARGO = ['wood','grain','steel','goods','fuel'];

            const TRUCK_TYPES = {
              van:    {label:'Fourgon',     cap:6,  speed:60,  fuel:2,  cost:4000,  maint:20},
              rigid:  {label:'Porteur',     cap:16, speed:75,  fuel:6,  cost:9000,  maint:45},
              semi:   {label:'Semi',        cap:32, speed:85,  fuel:12, cost:18000, maint:80},
              tanker: {label:'Citerne',     cap:28, speed:80,  fuel:10, cost:22000, maint:95},
            };

            let PRICES = { wood: 40, grain: 35, steel: 80, goods: 100, fuel: 70 };

            // Industries : production (+) / consommation (-) par tick (approximative)
            const INDUSTRY = {
              A: {wood:+0.20, grain:0,    steel:+0.05, goods:0,    fuel:+0.10},
              B: {wood:+0.45, grain:+0.12,steel:0,     goods:0,    fuel:0   },
              C: {wood:0,     grain:0,    steel:+0.35, goods:0.02, fuel:0.02},
              D: {wood:0,     grain:+0.55,steel:0,     goods:+0.05,fuel:0.03},
              E: {wood:+0.12, grain:+0.12,steel:+0.08, goods:+0.04,fuel:+0.02},
              F: {wood:0.02,  grain:0,    steel:+0.45, goods:0,    fuel:0.02},
              cons:{
                A:{goods:-0.30}, B:{steel:-0.25}, C:{goods:-0.2}, D:{wood:-0.25}, E:{grain:-0.2}, F:{goods:-0.1}
              }
            };

            // Contrats dynamiques
            let CONTRACTS = spawnContracts();

            // ======== √âtat du jeu ========
            const state = {
              t:0, dt:0.25, day:1,
              money: 25000,
              fuelStock: 0,           // carburant global (livraisons fuel augmentent)
              maintCost: 0,
              roads: new Map(),       // key "A-B" -> {lvl:1..3}
              stocks: Object.fromEntries(CITIES.map(c=>[c.id, Object.fromEntries(CARGO.map(k=>[k,0]))])),
              trucks: [],             // {id,type,cap,cargo,from,to,route,dist,at,dir,load,speed}
              camera: {x:0,y:0, z:1.0, tx:0,ty:0, dragging:false, px:0,py:0, touches:[]},
              saveKey: 'tktycoon-deluxe-v1'
            };
            let truckSeq=1;

            // ======== Canvas & UI ========
            const canvas = document.getElementById('view'), ctx = canvas.getContext('2d');
            const mini = document.getElementById('mini'), mctx = mini.getContext('2d');
            const moneyEl = document.getElementById('money');
            const dayEl   = document.getElementById('day');
            const fuelEl  = document.getElementById('fuel');
            const maintEl = document.getElementById('maint');

            // Remplir selects
            const cityA=document.getElementById('cityA'), cityB=document.getElementById('cityB');
            const fromSel=document.getElementById('from'), toSel=document.getElementById('to');
            for(const s of [cityA,cityB,fromSel,toSel]){
              CITIES.forEach(c=>{ const o=document.createElement('option'); o.value=c.id; o.textContent=c.name; s.appendChild(o); });
            }
            document.getElementById('buildRoad').onclick = ()=> {
              const lvl=parseInt(document.getElementById('roadLvl').value,10);
              const ok = buildOrUpgrade(cityA.value, cityB.value, lvl);
              if(!ok) alert("Impossible (fonds insuffisants ou villes identiques).");
            };
            document.getElementById('buyTruck').onclick = ()=> {
              const type = (document.getElementById('truckType').value);
              const cargo = (document.getElementById('cargoType').value);
              const r = buyTruck(type, fromSel.value, toSel.value, cargo);
              if(!r.ok) alert(r.msg);
              renderFleet();
            };

            // Tabs
            document.querySelectorAll('.tabs button').forEach(btn=>{
              btn.onclick=()=>{
                document.querySelectorAll('.tabs button').forEach(b=>b.classList.remove('active'));
                btn.classList.add('active');
                const id = btn.dataset.tab;
                document.querySelectorAll('.tab').forEach(t=>t.classList.add('hidden'));
                document.getElementById('tab-'+id).classList.remove('hidden');
              };
            });

            // ======== Gameplay ========
            function buildOrUpgrade(a,b,lvl){
              if(a===b) return false;
              const k=key(a,b);
              const cur = state.roads.get(k)?.lvl || 0;
              if(lvl<=cur) return true;
              const cost = [0,1000,2500,6000][lvl] - [0,1000,2500,6000][cur];
              if(state.money < cost) return false;
              state.money -= cost;
              state.roads.set(k,{lvl});
              return true;
            }
            function neighbors(id){
              const n=[]; for(const [k,v] of state.roads) { const [x,y]=k.split('-'); if(x===id) n.push(y); else if(y===id) n.push(x); }
              return n;
            }
            function key(a,b){ return a<b? `${a}-${b}` : `${b}-${a}`; }

            // A* pathfinding
            function astar(a,b){
              if(a===b) return [a];
              const open=[a], came={}, g={}, f={};
              const set=new Set(CITIES.map(c=>c.id));
              for(const id of set){ g[id]=Infinity; f[id]=Infinity; }
              g[a]=0; f[a]=heur(a,b);
              while(open.length){
                open.sort((i,j)=>f[i]-f[j]); const cur=open.shift();
                if(cur===b) return reconstruct(came, b);
                for(const nb of neighbors(cur)){
                  const d = dist(cur,nb)/speedOn(cur,nb);
                  const gg = g[cur] + d;
                  if(gg<g[nb]){
                    came[nb]=cur; g[nb]=gg; f[nb]=gg+heur(nb,b);
                    if(!open.includes(nb)) open.push(nb);
                  }
                }
              }
              return null;
            }
            function reconstruct(came, cur){ const p=[cur]; while(came[cur]){ cur=came[cur]; p.unshift(cur);} return p; }
            function heur(a,b){ const A=city(a), B=city(b); return Math.hypot(A.x-B.x,A.y-B.y)/80; }
            function dist(a,b){ const A=city(a), B=city(b); return Math.hypot(A.x-B.x,A.y-B.y); }
            function speedOn(a,b){
              const lvl = state.roads.get(key(a,b))?.lvl || 0;
              return [0,1,1.35,1.75][lvl] || 0.5;
            }

            function buyTruck(type, from, to, cargo){
              const tdef = TRUCK_TYPES[type]; if(!tdef) return {ok:false,msg:'Type inconnu'};
              const p = astar(from,to); if(!p) return {ok:false,msg:'Pas de route'};
              if(state.money < tdef.cost) return {ok:false,msg:'Fonds insuffisants'};
              state.money -= tdef.cost;
              const pdist = pathLen(p);
              const speed = tdef.speed/100; // √©chelle
              state.trucks.push({
                id: truckSeq++, type, cap:tdef.cap, cargo, from, to, route:p, dist:pdist, at:0, dir:+1, load:0, speed,
                fuel: tdef.fuel, maint: TRUCK_TYPES[type].maint
              });
              return {ok:true};
            }
            function pathLen(p){ let s=0; for(let i=0;i<p.length-1;i++) s+=dist(p[i],p[i+1]); return s; }
            function city(id){ return CITIES.find(c=>c.id===id); }

            function dynamicEconomy(){
              // petites variations journali√®res
              for(const k of Object.keys(PRICES)){
                const base = PRICES[k];
                PRICES[k] = Math.max(10, base + randRange(-3,3));
              }
              // frais fixes : maintenance r√©seau + par camion
              const roadMaint = [...state.roads.values()].reduce((a,r)=>a+ r.lvl*10,0);
              const fleetMaint = state.trucks.reduce((a,t)=>a+t.maint,0);
              state.maintCost = roadMaint + fleetMaint;
              state.money -= state.maintCost;
              // carburant : conversion fuelStock en $
              const fuelIncome = Math.min(state.fuelStock, 20) * PRICES.fuel;
              state.money += fuelIncome;
              state.fuelStock = Math.max(0, state.fuelStock - 20);
            }

            function spawnContracts(){
              const arr=[];
              const choices = ['A','B','C','D','E','F'];
              for(let i=0;i<6;i++){
                const cargo = pick(CARGO.filter(c=>c!=='fuel' || i%2===0));
                let from = pick(choices), to = pick(choices.filter(x=>x!==from));
                const reward = Math.round(180 + RNG()*260);
                const demand = Math.round(12 + RNG()*26);
                arr.push({id:i+1, cargo, to, reward, demand});
              }
              return arr;
            }

            // ======== Boucle principale ========
            function tick(){
              state.t += state.dt;
              // passage jour/nuit
              if(Math.floor(state.t/40)+1 !== state.day){
                state.day = Math.floor(state.t/40)+1;
                dynamicEconomy();
                CONTRACTS = spawnContracts(); // renouveller quotidiennement
              }

              // production/consommation
              for(const c of CITIES){
                for(const k of CARGO){
                  state.stocks[c.id][k] += Math.max(0, (INDUSTRY[c.id][k]||0))*state.dt;
                  state.stocks[c.id][k] += Math.min(0, (INDUSTRY.cons[c.id]?.[k]||0))*state.dt;
                  if(state.stocks[c.id][k]<0) state.stocks[c.id][k]=0;
                }
              }

              // camions
              for(const t of state.trucks){
                if(!t.route || t.dist<=0) continue;
                t.at += 80 * t.speed * state.dt * avgSpeedFactor(t.route);
                if(t.at >= t.dist){
                  const dest = t.dir>0 ? t.route[t.route.length-1] : t.route[0];
                  // d√©chargement
                  if(t.load>0 && dest===t.to){
                    const ct = CONTRACTS.find(c=>c.cargo===t.cargo && c.to===dest && c.demand>0);
                    let delivered = t.load;
                    if(ct){
                      const used = Math.min(ct.demand, delivered);
                      state.money += used * (ct.reward + (PRICES[t.cargo]||0));
                      ct.demand -= used; delivered -= used;
                    } else {
                      state.money += delivered * (PRICES[t.cargo]||0);
                    }
                    if(t.cargo==='fuel') state.fuelStock += delivered;
                    state.stocks[dest][t.cargo] += Math.max(0, delivered);
                    t.load=0;
                  }
                  // chargement
                  if(t.dir<0){
                    const avail = state.stocks[t.from][t.cargo]||0;
                    const take = Math.min(avail, t.cap);
                    state.stocks[t.from][t.cargo]-=take;
                    t.load = take;
                    // payer carburant (au km √©quivalent)
                    const km = t.dist/20;
                    state.money -= km * t.fuel;
                  }
                  // demi-tour
                  t.dir *= -1; t.at=0;
                }
              }

              // autosave
              if(Math.floor(state.t)%20===0) save();
            }
            function avgSpeedFactor(route){
              if(!route || route.length<2) return 1;
              let s=0,c=0;
              for(let i=0;i<route.length-1;i++){ s += speedOn(route[i],route[i+1]); c++; }
              return c? s/c : 1;
            }

            // ======== Rendu ========
            let bgCanvas = null;
            function ensureBackground(){
              if(bgCanvas) return;
              bgCanvas = document.createElement('canvas');
              bgCanvas.width = canvas.width; bgCanvas.height = canvas.height;
              const g = bgCanvas.getContext('2d');
              // gradient ciel/terre + ‚Äúrelief‚Äù bruit value-noise
              const grd = g.createLinearGradient(0,0,0,canvas.height);
              grd.addColorStop(0,"#0b0f16"); grd.addColorStop(1,"#0e1420");
              g.fillStyle=grd; g.fillRect(0,0,canvas.width,canvas.height);
              g.globalAlpha=0.07; g.fillStyle="#5fbf7a";
              for(let i=0;i<220;i++){
                const x=RNG()*canvas.width,y=RNG()*canvas.height;
                const r=8+RNG()*20; g.beginPath(); g.arc(x,y,r,0,Math.PI*2); g.fill();
              }
              g.globalAlpha=1;
            }
            function worldToScreen(x,y){ const z=state.camera.z; return {x:(x+state.camera.x)*z, y:(y+state.camera.y)*z}; }
            function screenToWorld(x,y){ const z=state.camera.z; return {x:x/z - state.camera.x, y:y/z - state.camera.y}; }

            function draw(){
              ensureBackground();
              ctx.drawImage(bgCanvas,0,0);

              // day/night overlay
              const a = 0.2 + 0.3*Math.sin(state.t/6);
              ctx.fillStyle=`rgba(0,0,0,${a})`; ctx.fillRect(0,0,canvas.width,canvas.height);

              // routes
              for(const [k,v] of state.roads){
                const [a,b]=k.split('-'); const A=city(a), B=city(b);
                const p1=worldToScreen(A.x,A.y), p2=worldToScreen(B.x,B.y);
                ctx.lineWidth = 2 + v.lvl*1.5;
                ctx.strokeStyle = ['#2b3b55','#4e86ff','#75c46b','#ffd166'][v.lvl];
                ctx.beginPath(); // l√©g√®re courbe
                const mx=(p1.x+p2.x)/2, my=(p1.y+p2.y)/2, off=(v.lvl-1)*6;
                ctx.moveTo(p1.x,p1.y);
                ctx.quadraticCurveTo(mx+off,my-off,p2.x,p2.y);
                ctx.stroke();
              }

              // villes
              for(const c of CITIES){
                const P=worldToScreen(c.x,c.y);
                ctx.fillStyle="#1f2937"; ctx.beginPath(); ctx.arc(P.x,P.y, 18*state.camera.z, 0, Math.PI*2); ctx.fill();
                ctx.strokeStyle="#4b5563"; ctx.lineWidth=1.5; ctx.stroke();
                ctx.fillStyle="#e5e7eb"; ctx.font=`${12*state.camera.z}px system-ui`; ctx.fillText(c.name, P.x-24*state.camera.z, P.y-24*state.camera.z);
              }

              // camions
              for(const t of state.trucks){
                if(!t.route || t.route.length<2) continue;
                let d=t.at, pts=[]; for(let i=0;i<t.route.length-1;i++) pts.push([t.route[i], t.route[i+1]]);
                // calc position
                let x=null,y=null, remain=d;
                for(const seg of pts){
                  const A=city(seg[0]), B=city(seg[1]);
                  const L=dist(seg[0],seg[1]);
                  if(remain<=L || seg===pts[pts.length-1]){
                    const k=remain/L; const sP = t.dir>0 ? {a:A,b:B} : {a:B,b:A};
                    x = sP.a.x + (sP.b.x-sP.a.x)*Math.min(1,Math.max(0,k));
                    y = sP.a.y + (sP.b.y-sP.a.y)*Math.min(1,Math.max(0,k));
                    break;
                  } else remain -= L;
                }
                const P=worldToScreen(x,y);
                ctx.fillStyle = t.cargo==='wood'?'#8b5a2b': t.cargo==='grain'?'#e3b341': t.cargo==='steel'?'#6b7280': t.cargo==='goods'?'#60a5fa':'#c084fc';
                ctx.fillRect(P.x-6*state.camera.z,P.y-4*state.camera.z,12*state.camera.z,8*state.camera.z);
              }

              // HUD
              moneyEl.textContent = Math.round(state.money).toLocaleString() + " $";
              fuelEl.textContent  = Math.floor(state.fuelStock) + "u";
              maintEl.textContent = "-"+Math.round(state.maintCost)+" $/jour";
              dayEl.textContent   = "Day "+state.day;

              // mini-carte
              mctx.clearRect(0,0,mini.width,mini.height);
              mctx.fillStyle="#0b0f16"; mctx.fillRect(0,0,mini.width,mini.height);
              const sx=mini.width/ (canvas.width), sy=mini.height/(canvas.height);
              for(const [k,v] of state.roads){
                const [a,b]=k.split('-'); const A=city(a), B=city(b);
                mctx.strokeStyle=['#2b3b55','#4e86ff','#75c46b','#ffd166'][v.lvl];
                mctx.lineWidth=1; mctx.beginPath(); mctx.moveTo(A.x*sx,B.y*0+ A.y*sy); mctx.lineTo(B.x*sx,B.y*sy); mctx.stroke();
              }
              for(const c of CITIES){
                mctx.fillStyle="#9aa4b2"; mctx.fillRect(c.x*sx-2,c.y*sy-2,4,4);
              }
            }

            // ======== Entr√©es (pan/zoom tactiles) ========
            canvas.addEventListener('wheel',(e)=>{ e.preventDefault(); const z=state.camera.z*(e.deltaY<0?1.08:0.92); state.camera.z=Math.min(2.4,Math.max(0.6,z)); });
            canvas.addEventListener('mousedown',(e)=>{ state.camera.dragging=true; state.camera.px=e.clientX; state.camera.py=e.clientY; });
            window.addEventListener('mouseup',()=>{ state.camera.dragging=false; });
            window.addEventListener('mousemove',(e)=>{ if(!state.camera.dragging) return; const dx=(e.clientX-state.camera.px)/state.camera.z, dy=(e.clientY-state.camera.py)/state.camera.z; state.camera.x+=dx; state.camera.y+=dy; state.camera.px=e.clientX; state.camera.py=e.clientY; });
            // touch
            canvas.addEventListener('touchstart',e=>{ if(e.touches.length===1){ const t=e.touches[0]; state.camera.dragging=true; state.camera.px=t.clientX; state.camera.py=t.clientY; }});
            canvas.addEventListener('touchmove',e=>{ if(state.camera.dragging && e.touches.length===1){ const t=e.touches[0]; const dx=(t.clientX-state.camera.px)/state.camera.z, dy=(t.clientY-state.camera.py)/state.camera.z; state.camera.x+=dx; state.camera.y+=dy; state.camera.px=t.clientX; state.camera.py=t.clientY; }});
            canvas.addEventListener('touchend',()=>{ state.camera.dragging=false; });

            // ======== Rendu & Game Loop ========
            function loop(){ tick(); draw(); requestAnimationFrame(loop); }
            // r√©seau initial
            buildOrUpgrade('A','E',2); buildOrUpgrade('E','B',1); buildOrUpgrade('E','C',1); buildOrUpgrade('E','D',1); buildOrUpgrade('C','F',1);

            // ======== UI listes ========
            function renderFleet(){
              const box=document.getElementById('fleetList'); box.innerHTML='';
              for(const t of state.trucks){
                const it=document.createElement('div'); it.className='item';
                it.innerHTML=`#${t.id} ${TRUCK_TYPES[t.type].label} ‚Ä¢ ${t.cargo} ‚Ä¢ ${city(t.from).name} ‚áÜ ${city(t.to).name}
                  <span class="badge">cap ${t.cap}</span>
                  <span class="badge">v${Math.round(TRUCK_TYPES[t.type].speed)}km/h</span>
                  <span class="badge">fuel ${t.fuel}/100km</span>`;
                box.appendChild(it);
              }
            }
            function renderContracts(){
              const box=document.getElementById('contracts'); box.innerHTML='';
              for(const c of CONTRACTS){
                const it=document.createElement('div'); it.className='item';
                it.innerHTML = `<b>${c.cargo}</b> ‚Üí ${city(c.to).name}
                  <span class="badge ok">${c.reward}$/u</span>
                  <span class="badge warn">reste ${c.demand}</span>`;
                box.appendChild(it);
              }
            }
            function renderEconomy(){
              const box=document.getElementById('eco'); box.innerHTML='';
              for(const k of Object.keys(PRICES)){
                const it=document.createElement('div'); it.className='item';
                it.innerHTML = `${k} <span class="badge ok">${PRICES[k]}$/u</span>`;
                box.appendChild(it);
              }
            }
            setInterval(()=>{ renderFleet(); renderContracts(); renderEconomy(); }, 1000);

            // ======== Save / Load ========
            function save(){
              try{
                const copy = JSON.parse(JSON.stringify(state));
                // strip canvases & camera drag flags
                delete copy.camera.dragging;
                localStorage.setItem(state.saveKey, JSON.stringify(copy));
              }catch{}
            }
            function load(){
              try{
                const txt = localStorage.getItem(state.saveKey); if(!txt) return;
                const s = JSON.parse(txt);
                Object.assign(state, s);
              }catch{}
            }
            load();
            loop();

            // ======== Helpers ========
            function mulberry32(a){return function(){var t=a+=0x6D2B79F5;t=Math.imul(t^t>>>15,t|1);t^=t+Math.imul(t^t>>>7,t|61);return ((t^t>>>14)>>>0)/4294967296}}
            function hashCode(str){let h=0; for(let i=0;i<str.length;i++){h=((h<<5)-h)+str.charCodeAt(i)|0;} return h>>>0;}
            function pick(arr){return arr[(Math.random()+RNG())*arr.length|0];}
            function randRange(a,b){return Math.round((Math.random()+RNG()-0.5)*(b-a))+ (a+b)/2;}
          """).strip()), encoding="utf-8")

          PY

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: _site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        uses: actions/deploy-pages@v4
